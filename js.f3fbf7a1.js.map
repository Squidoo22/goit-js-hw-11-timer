{"version":3,"sources":["js/index.js"],"names":["CountdownTimer","constructor","selector","targetDate","refs","days","document","querySelector","hours","mins","secs","startTimer","setInterval","currentDate","Date","now","deltaTime","getTime","time","getTimeComponents","updateTimer","clearTimer","Math","floor","pad","textContent","value","String","padStart","timer"],"mappings":";;;AA6DA,aA7DA,QAAA,qBAEA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAEbC,KAAAA,KAAO,CACVC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAIjCI,aACEC,YAAY,KACJC,MAAAA,EAAcC,KAAKC,MAEnBC,EADa,KAAKb,WAAWc,UACJJ,EACzBK,EAAO,KAAKC,kBAAkBH,GAE/BI,KAAAA,YAAYF,GAEbF,EAAY,GAAG,KAAKK,cACvB,KAGLF,kBAAkBD,GAMT,MAAA,CAAEb,KALIiB,KAAKC,MAAML,EAAQ,OAKjBV,MAJD,KAAKgB,IAAIF,KAAKC,MAAOL,EAAQ,MAAyB,OAI9CT,KAHT,KAAKe,IAAIF,KAAKC,MAAOL,EAAQ,KAAoB,MAGlCR,KAFf,KAAKc,IAAIF,KAAKC,MAAOL,EAAQ,IAAc,OAK1DG,aACOjB,KAAAA,KAAKC,KAAKoB,YAAc,KACxBrB,KAAAA,KAAKI,MAAMiB,YAAc,KACzBrB,KAAAA,KAAKK,KAAKgB,YAAc,KACxBrB,KAAAA,KAAKM,KAAKe,YAAc,KAG/BD,IAAIE,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCR,aAAY,KAAEf,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC1BN,KAAAA,KAAKC,KAAKoB,eAAiBpB,IAC3BD,KAAAA,KAAKI,MAAMiB,eAAiBjB,IAC5BJ,KAAAA,KAAKK,KAAKgB,eAAiBhB,IAC3BL,KAAAA,KAAKM,KAAKe,eAAiBf,KAIpC,MAAMmB,EAAQ,IAAI7B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIW,KAAK,kBAGvBe,EAAMlB","file":"js.f3fbf7a1.js","sourceRoot":"../src","sourcesContent":["import '../sass/main.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n\n    this.refs = {\n      days: document.querySelector('[data-value=\"days\"]'),\n      hours: document.querySelector('[data-value=\"hours\"]'),\n      mins: document.querySelector('[data-value=\"mins\"]'),\n      secs: document.querySelector('[data-value=\"secs\"]'),\n    };\n  }\n\n  startTimer() {\n    setInterval(() => {\n      const currentDate = Date.now();\n      const targetDate = this.targetDate.getTime();\n      const deltaTime = targetDate - currentDate;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.updateTimer(time);\n\n      if (deltaTime < 0) this.clearTimer();\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  clearTimer() {\n    this.refs.days.textContent = '00';\n    this.refs.hours.textContent = '00';\n    this.refs.mins.textContent = '00';\n    this.refs.secs.textContent = '00';\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateTimer({ days, hours, mins, secs }) {\n    this.refs.days.textContent = `${days}`;\n    this.refs.hours.textContent = `${hours}`;\n    this.refs.mins.textContent = `${mins}`;\n    this.refs.secs.textContent = `${secs}`;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Sep 23, 2021'),\n});\n\ntimer.startTimer();\n"]}